import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
from gemini_helper import get_gemini_response

# ЁЯФБ Cache model to speed up repeat predictions
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("trained_model.keras")

def model_prediction(test_image):
    model = load_model()
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(128, 128))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])
    predictions = model.predict(input_arr)
    return np.argmax(predictions)

# Sidebar Navigation
st.sidebar.title("Dashboard")
app_mode = st.sidebar.selectbox("Select Page", ["Home / роорпБроХрокрпНрокрпБ", "About / рокро▒рпНро▒ро┐", "Disease Recognition / роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН"])

# Home Page
if app_mode == "Home / роорпБроХрокрпНрокрпБ":
    st.header("ЁЯМ┐ Marutham Mozhi / рооро░рпБродроорпН роорпКро┤ро┐")
    bg_image_path = r"C:\Users\ilaki\Desktop\Marutham Mozhi\Homepage.png"
    st.image(bg_image_path, use_container_width=True)

    st.markdown("#### ЁЯкФ *тАЬро╡ро│ро░рпБроорпН роЗро▓рпИ; ро╡ро│ро░рпБроорпН ро╡ро╛ро┤рпНро╡рпБ.тАЭ* тАФ A leaf that grows, nurtures life.")

    st.markdown("""
    ## Welcome to **Marutham Mozhi** ЁЯМ╛  
    **рооро░рпБродроорпН роорпКро┤ро┐роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!**

    _"Where the whisper of leaves tells ancient tales, and every green breath feeds the world."_  
    _"роЗро▓рпИроХро│рпН роЪрпКро▓рпНро╡родрпБ рокрогрпНроЯрпИ роХродрпИроХро│рпН; рокроЪрпБроорпИ роорпВроЪрпНроЪрпЗ роЙро▓роХрпИ роЙропро┐ро░рпНродрпНродроХрпНроХро╛роХрпНроХро┐ро▒родрпБ."_

    Plants are the silent givers тАФ the root of our food, the soul of our ecosystems.  
    **рооро░роЩрпНроХро│рпН роироорпНроорпИ рокрпЛро╖ро┐роХрпНроХро┐ройрпНро▒рой. роЖройро╛ро▓рпН родрпЖро░ро┐ропро╛род роирпЛропрпНроХро│рпН роЕро╡ро▒рпНро▒рпИрокрпН рокро╛родро┐роХрпНроХро┐ройрпНро▒рой.**

    **Marutham Mozhi** is a bridge тАФ connecting traditional farming wisdom with modern AI.  
    **рооро░рпБродроорпН роорпКро┤ро┐** роОройрпНрокродрпБ рокро╛ро░роорпНрокро░ро┐роп ро╡рпЗро│ро╛рогрпНроорпИ роЕро▒ро┐ро╡рпИропрпБроорпН, роиро╡рпАрой родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродрпИропрпБроорпН роЗрогрпИроХрпНроХрпБроорпН рокро╛ро▓рооро╛роХрпБроорпН.

    ЁЯСЙ Start from the sidebar! / **ро╡ро▓рокрпНрокроХрпНроХроорпН рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН родрпКроЯроЩрпНроХрпБ!**
    """)

    st.markdown("<hr><center>ЁЯМ┐ *Dedicated to the farmers, the land, and the language that feeds us.* ЁЯМ╛</center>", unsafe_allow_html=True)

# About Page
elif app_mode == "About / рокро▒рпНро▒ро┐":
    st.header("ЁЯУШ About the Project / родро┐роЯрпНроЯродрпНродрпИрокрпН рокро▒рпНро▒ро┐")
    st.markdown("""
    ## ЁЯУЪ Dataset: The Roots of Knowledge  
    **родроХро╡ро▓рпН родрпКроХрпБрокрпНрокрпБ: роЕро▒ро┐ро╡ро┐ройрпН ро╡рпЗро░рпНроХро│рпН**

    We use the **PlantVillage Dataset** тАУ with 87,000+ images from various crops and diseases.  
    **87,000+ рокроЯроЩрпНроХро│рпН роХрпКрогрпНроЯ родрпКроХрпБрокрпНрокрпБ, рокро▓ рокропро┐ро░рпНроХро│рпН рооро▒рпНро▒рпБроорпН роирпЛропрпНроХро│рпН роЕроЯроЩрпНроХро┐ропрпБро│рпНро│рой.**

    - **Training / рокропро┐ро▒рпНроЪро┐:** 70,295
    - **Validation / роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ:** 17,572
    - **Testing / роЪрпЛродройрпИ:** 33

    *Marutham Mozhi is not just a tool тАФ it's a tribute.*  
    **рооро░рпБродроорпН роорпКро┤ро┐ роОройрпНрокродрпБ роХро░рпБро╡ро┐ роороЯрпНроЯрпБрооро▓рпНро▓; рооро░рокрпБроХрпНроХро╛рой роЕроЮрпНроЪро▓ро┐.**
    """)

# Prediction Page
elif app_mode == "Disease Recognition / роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН":
    st.header("ЁЯй║ Disease Recognition / родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН")
    test_image = st.file_uploader("ЁЯУд Upload a Plant Leaf Image / роТро░рпБ роЗро▓рпИрокрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН", type=["jpg", "jpeg", "png", "webp"])

    if test_image is not None:
        st.image(test_image, caption="ЁЯУ╕ Uploaded Image", use_container_width=True)

        if st.button("ЁЯФН Predict / роХрогро┐рокрпНрокрпБ"):
            st.snow()
            st.write("ЁЯза Analyzing the image... / рокроЯроорпН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ...")

            try:
                result_index = model_prediction(test_image)

                class_name = [
                    'Apple___Apple_scab', 'Apple___Black_rot', 'Apple___Cedar_apple_rust', 'Apple___healthy',
                    'Blueberry___healthy', 'Cherry_(including_sour)___Powdery_mildew',
                    'Cherry_(including_sour)___healthy', 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot',
                    'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy',
                    'Grape___Black_rot', 'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)',
                    'Grape___healthy', 'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot',
                    'Peach___healthy', 'Pepper,_bell___Bacterial_spot', 'Pepper,_bell___healthy',
                    'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy',
                    'Raspberry___healthy', 'Soybean___healthy', 'Squash___Powdery_mildew',
                    'Strawberry___Leaf_scorch', 'Strawberry___healthy', 'Tomato___Bacterial_spot',
                    'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold',
                    'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite',
                    'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',
                    'Tomato___healthy'
                ]

                disease_result = class_name[result_index]

                st.success(f"тЬЕ Predicted: **{disease_result}**\n\nЁЯОЙ роХрогро┐роХрпНроХрокрпНрокроЯрпНроЯ роирпЛропрпН: **{disease_result}**")

                # ЁЯМ▒ Gemini API for treatment advice
                with st.spinner("ЁЯМ┐ Getting advice from Gemini..."):
                    advice = get_gemini_response(disease_result)

                if advice:
                    st.markdown("### ЁЯдЦ Gemini Says (in Tamil):")
                    st.write(advice)
                else:
                    st.warning("тЪая╕П Gemini could not return any advice.")

            except Exception as e:
                st.error(f"тЭМ Error during prediction or Gemini response: {e}")

    st.markdown("""<hr><center>ЁЯМ┐ *тАЬроЙро┤рпБро╡ро╛ро░рпН роЙро▓роХродрпНродро╛ро░рпНроХрпНроХрпЖро▓рпНро▓ро╛роорпН роОро┤рпБро╡ро╛ро░рпН роорпБройрпНройройро┐ родрпВрогрпИ.тАЭ* тАФ *Thirukkural 1031*</center>""", unsafe_allow_html=True)
